{{- $secrets := .Values.secrets }}
{{- $fullName := include "cactus-backend.fullname" . }}
{{- $secretName := .Values.existingSecretName }}
{{- if or (eq .Values.useExistingSecret false) (empty .Values.existingSecretName) }}
{{- $secretName = $fullName }}
{{- end }}
apiVersion: apps/v1
kind: {{ .Values.kind }}
metadata:
  name: {{ include "cactus-backend.fullname" . }}
  labels:
    {{- include "cactus-backend.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "cactus-backend.fullname" . }}
  selector:
    matchLabels:
      {{- include "cactus-backend.selectorLabels" . | nindent 6 }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cactus-backend.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cactus-backend.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ include "cactus-backend.fullname" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (print "v" .Chart.AppVersion) }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: admin
              containerPort: 18190
              protocol: TCP
          startupProbe:
            httpGet:
              path: /health
              port: admin
            periodSeconds: 10
            failureThreshold: 30
          livenessProbe:
            httpGet:
              path: /health
              port: admin
            periodSeconds: 10
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /health
              port: admin
            periodSeconds: 10
            failureThreshold: 30
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: {{ ternary .Values.persistentVolume.statefulSetNameOverride "storage-volume" (and .Values.persistentVolume.enabled (not (empty .Values.persistentVolume.statefulSetNameOverride))) }}
              mountPath: /app/data
              subPath: "{{ .Values.persistentVolume.subPath }}"
          env:
          {{- range $key, $value := .Values.envVars }}
            - name: {{ $key }}
              value: {{ quote $value }}
          {{- end }}
          {{- range $secretSource, $secretConfig := $secrets }}
            {{- if eq $secretSource "cactus-backend-secret" }}
              {{ $secretSource = $secretName }}
            {{- end }}
            {{- if or (eq $secretConfig.as "environment") (eq $secretConfig.as "csi") }}
              {{- range $item := $secretConfig.items }}
            - name: {{ required "envVarName is required on secrets items when using environment or csi" $item.envVarName | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretSource }}
                  key: {{ $item.key }}
              {{- end }}
            {{- end }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints: 
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.persistentVolume.statefulSetNameOverride | default "storage-volume" }}
        {{- if .Values.persistentVolume.annotations }}
        annotations:
          {{ toYaml .Values.persistentVolume.annotations | nindent 8 }}
        {{- end }}
        {{- if .Values.persistentVolume.labels }}
        labels:
          {{ toYaml .Values.persistentVolume.labels | nindent 8 }}
        {{- end }}
      spec:
        accessModes:
          {{- toYaml .Values.persistentVolume.accessModes | nindent 12 }}
        resources:
          requests:
            storage: "{{ .Values.persistentVolume.size }}"
      {{- if .Values.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
  {{- else }}
      volumes:
        - name: storage-volume
          emptyDir:
          {{- if .Values.emptyDir.sizeLimit }}
            sizeLimit: {{ .Values.emptyDir.sizeLimit }}
          {{- else }}
            sizeLimit: 8Gi
          {{- end -}}
{{- end }}
