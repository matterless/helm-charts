# Default values for cactus-backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: 992382468184.dkr.ecr.eu-central-1.amazonaws.com/cactus-backend
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 100

service:
  type: ClusterIP
  port: 8080
  adminPort: 18190

ingress:
  enabled: false
  # className: nginx
  annotations:
    # kubernetes.io/tls-acme: "true"

    # CORS is needed for requests from Cactus Web to work,
    # make sure to configure this for whatever ingress provider you use.
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://cactus.auki.ai"

    # Increase proxy body size to allow for large data uploads.
    nginx.ingress.kubernetes.io/proxy-body-size: "100M"
  hosts:
    - host: cactus-backend.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 1
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

replicaCount: 1

nodeSelector: {}

tolerations: []

affinity: {}

monitoring:
  namespace: monitoring
  podMonitor:
    create: false
    scrapeInterval: 10s

useExistingSecret: false
existingSecretName: ""
secretData:
  POSTGRES_PASSWORD: cactus-backend  # This is the password for the postgres database. This should be a random string.
  REDIS_PASSWORD: cactus-backend  # This is the password for the redis database. This should be a random string, it can be empty if you don't want to set up authentication for redis.
  TOKEN_ENCRYPTION_KEY: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef  # This is the key for the firebase token encryption. This should be a random string of 32 characters.
  AUTH_JWT_PROFILE: '{"type":"application","keyId":"123","key":"-----BEGIN RSA PRIVATE KEY-----\nexample\n-----END RSA PRIVATE KEY-----\n","appId":"456","clientId":"789"}'  # This is the JWT profile for the auth server (IdP).
  APP_SECRET: cactus-backend  # This is the secret for the app. You should get it from the AUKI console.
secrets:
  cactus-backend-secret:
    as: environment
    items:
    - key: POSTGRES_PASSWORD
      envVarName: POSTGRES_PASSWORD
    - key: REDIS_PASSWORD
      envVarName: REDIS_PASSWORD
    - key: TOKEN_ENCRYPTION_KEY
      envVarName: TOKEN_ENCRYPTION_KEY
    - key: AUTH_JWT_PROFILE
      envVarName: AUTH_JWT_PROFILE
    - key: APP_SECRET
      envVarName: APP_SECRET

kind: StatefulSet  # This is the kind of the resource to create. Use `Deployment` for production together with BLOB_STORAGE_TYPE=s3 and `StatefulSet` and BLOB_STORAGE_TYPE=local for development.

persistentVolume:
  ## If true, create/use a Persistent Volume Claim
  ## If false, use emptyDir
  ##
  enabled: true

  ## If set it will override the name of the created persistent volume claim
  ## generated by the stateful set.
  ##
  statefulSetNameOverride: ""

  ## Persistent Volume access modes
  ## Must match those of existing PV or dynamic provisioner
  ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  accessModes:
    - ReadWriteOnce

  ## Persistent Volume labels
  ##
  labels: {}

  ## Persistent Volume annotations
  ##
  annotations: {}

  ## Persistent Volume existing claim name
  ## Requires server.persistentVolume.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim: ""

  ## Persistent Volume size
  ##
  size: 20Gi

  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: ""

  ## Persistent Volume Binding Mode
  ## If defined, volumeBindingMode: <volumeBindingMode>
  ## If undefined (the default) or set to null, no volumeBindingMode spec is
  ##   set, choosing the default mode.
  ##
  # volumeBindingMode: ""

  ## Path Persistent Volume to mount
  mountPath: "/app/data"
  subPath: ""

  ## Persistent Volume Claim Selector
  ## Useful if Persistent Volumes have been provisioned in advance
  ## Ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#selector
  ##
  # selector:
  #  matchLabels:
  #    release: "stable"
  #  matchExpressions:
  #    - { key: environment, operator: In, values: [ dev ] }

  ## Persistent Volume Name
  ## Useful if Persistent Volumes have been provisioned in advance and you want to use a specific one
  ##
  # volumeName: ""

# https://github.com/bitnami/charts/tree/postgresql/16.7.27/bitnami/postgresql#parameters
postgresql:
  # If true, the PostgreSQL dependency is enabled
  enabled: true
  image:
    repository: bitnamilegacy/postgresql
  auth:
    username: cactus-backend
    password: cactus-backend
    database: cactus-backend
  primary:
    networkPolicy:
      enabled: false
    resources:
      limits:
        cpu: 1
        memory: 256Mi
        ephemeral-storage: 2Gi
      requests:
        cpu: 100m
        memory: 128Mi
        ephemeral-storage: 50Mi
  fullnameOverride: cactus-backend-postgresql

# https://github.com/bitnami/charts/tree/redis/22.0.7/bitnami/redis#parameters
redis:
  # If true, the Redis dependency is enabled
  enabled: true
  image:
    repository: bitnamilegacy/redis
  metrics:
    enabled: true
    image:
      repository: bitnamilegacy/redis-exporter
    resources:
      limits:
        cpu: 200m
        memory: 32Mi
      requests:
        cpu: 100m
        memory: 32Mi
    serviceMonitor:
      enabled: false
      namespace: monitoring
  master:
    resources:
      limits:
        cpu: 1
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    disableCommands:
      - FLUSHALL
      - FLUSHDB
  replica:
    replicaCount: 1
    resources:
      limits:
        cpu: 1
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    disableCommands:
      - FLUSHALL
      - FLUSHDB
  auth:
    enabled: true
    password: cactus-backend
  fullnameOverride: redis

postgresqlha:
  enabled: false

# See https://github.com/juicedata/charts/blob/helm-chart-juicefs-s3-gateway-0.11.3/charts/juicefs-s3-gateway/values.yaml
juicefs-s3-gateway:
  enabled: false

# Only used if persistentVolume.enabled: false
emptyDir:
  sizeLimit: 8Gi

envVars:
  GATEWAY_PORT: 8080
  GATEWAY_ADMIN_PORT: 18190
  ENV: prod  # Anything other than 'test'
  AUKI_API_URL: https://api.auki.network  # The URL of the AUKI API
  AUKI_DDS_URL: https://dds.auki.network  # The URL of the DDS
  AUTH_SERVER_URL: https://auth.auki.network  # The URL of the Auth server
  RUST_LOG: info  # The log level for the backend
  MIGRATIONS_PATH: /app/migrations
  # sec   min   hour   day of month   month   day of week
  # *     *     *      *              *       *
  CRONJOBS_TAKE_SNAPSHOT_SCHEDULE: "0 0 16 * * *"  # The schedule for the cron job to take a snapshot of semantic shelves
  FAKESTORE_URL: https://fakestore-backend.prod.lookingglassprotocol.com  # This will be used by default when no other backend is provided.

  POSTGRES_POOL_SIZE: 10  # The size of the postgres pool
  POSTGRES_POOL_IDLE_TIMEOUT: 2  # The idle timeout for the postgres pool in seconds. This is the time after which the connection will be closed if it is idle.
  POSTGRES_POOL_CONNECTION_TIMEOUT: 3  # The connection timeout for the postgres pool in seconds. This is the time after which the connection will be closed if it is not established.
  POSTGRES_NAME: cactus-backend  # The name of the database
  POSTGRES_USER: cactus-backend  # The username for the database
  POSTGRES_PORT: 5432  # The port for the database
  POSTGRES_SSL_MODE: disable
  POSTGRES_HOST: cactus-backend-postgresql  # The host for the database

  REDIS_MASTER_ADDR: redis-master:6379/0  # The address of the redis master and database id
  REDIS_MASTER_POOL_SIZE: 50  # The size of the redis master pool, this should be greater than 0.
  REDIS_MASTER_POOL_CONNECTION_TIMEOUT: 5  # The connection timeout for the redis master pool in seconds.
  REDIS_MASTER_POOL_IDLE_TIMEOUT: 3  # The idle timeout for the redis master pool in seconds.
  REDIS_REPLICA_ADDR: redis-replicas:6379/0  # The address of the redis replica and database id. This cannot be empty but can be the same as the master address if you don't want to use replicas.
  REDIS_REPLICA_POOL_SIZE: 50  # The size of the redis replica pool, all read requests will be served by the replicas. This should be greater than 0.
  REDIS_REPLICA_POOL_CONNECTION_TIMEOUT: 5  # The connection timeout for the redis replica pool
  REDIS_REPLICA_POOL_IDLE_TIMEOUT: 3  # The idle timeout for the redis replica pool

  BLOB_STORAGE_TYPE: local  # The type of blob storage to use, 'local' or 's3'. 's3' is required if you run more than one replica.
  STORAGE_BASE_PATH: /app/data/blobstorage  # The base path for the blob storage, only used in local mode. This cannot be empty when blob storage type is local.

  S3_ENDPOINT_URL: http://juicefs-s3-gateway:9000  # The endpoint URL for the S3 gateway. This cannot be empty when blob storage type is s3.
  S3_REGION: region  # The region for the S3/Azure Blob Storage. This cannot be empty when blob storage type is s3.
  S3_BUCKET_NAME: bucket-name  # The name of the S3 bucket. This cannot be empty when blob storage type is s3.
  S3_PATH_PREFIX: cactus-backend  # The path prefix for the S3 bucket. This cannot be empty when blob storage type is s3.

  TOKEN_CACHE_TTL: 600  # The TTL for the token cache in seconds. This is the time after which the auth token will be REVERIFIED by the backend. Set to zero to disable caching.

  APP_KEY: cactus-backend  # The key for the app. Created in the AUKI console.
