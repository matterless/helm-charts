# Default values for cactus-backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: 992382468184.dkr.ecr.eu-central-1.amazonaws.com/cactus-backend
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 100

service:
  type: ClusterIP
  port: 8080
  adminPort: 18190

ingress:
  enabled: false
  # className: nginx
  annotations:
    # kubernetes.io/tls-acme: "true"

    # CORS is needed for requests from Cactus Web to work,
    # make sure to configure this for whatever ingress provider you use.
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://cactus.auki.ai"

    # Increase proxy body size to allow for large data uploads.
    nginx.ingress.kubernetes.io/proxy-body-size: "100M"
  hosts:
    - host: cactus-backend.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 1
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

replicaCount: 1

nodeSelector: {}

tolerations: []

affinity: {}

monitoring:
  namespace: monitoring
  podMonitor:
    create: false
    scrapeInterval: 10s

useExistingSecret: false
existingSecretName: ""
secretData:
  POSTGRES_PASSWORD: cactus-backend
  REDIS_PASSWORD: cactus-backend
  TOKEN_ENCRYPTION_KEY: cactus-backend
  AUTH_JWT_PROFILE: cactus-backend
  APP_SECRET: cactus-backend
secrets:
  cactus-backend-secret:
    as: environments
    items:
    - key: POSTGRES_PASSWORD
      envVarName: POSTGRES_PASSWORD
    - key: REDIS_PASSWORD
      envVarName: REDIS_PASSWORD
    - key: TOKEN_ENCRYPTION_KEY
      envVarName: TOKEN_ENCRYPTION_KEY
    - key: AUTH_JWT_PROFILE
      envVarName: AUTH_JWT_PROFILE
    - key: APP_SECRET
      envVarName: APP_SECRET

kind: StatefulSet

persistentVolume:
  ## If true, create/use a Persistent Volume Claim
  ## If false, use emptyDir
  ##
  enabled: true

  ## If set it will override the name of the created persistent volume claim
  ## generated by the stateful set.
  ##
  statefulSetNameOverride: ""

  ## Persistent Volume access modes
  ## Must match those of existing PV or dynamic provisioner
  ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  accessModes:
    - ReadWriteOnce

  ## Persistent Volume labels
  ##
  labels: {}

  ## Persistent Volume annotations
  ##
  annotations: {}

  ## Persistent Volume existing claim name
  ## Requires server.persistentVolume.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim: ""

  ## Persistent Volume size
  ##
  size: 20Gi

  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "gp2"

  ## Persistent Volume Binding Mode
  ## If defined, volumeBindingMode: <volumeBindingMode>
  ## If undefined (the default) or set to null, no volumeBindingMode spec is
  ##   set, choosing the default mode.
  ##
  # volumeBindingMode: ""

  ## Path Persistent Volume to mount
  mountPath: "/app/data"
  subPath: ""

  ## Persistent Volume Claim Selector
  ## Useful if Persistent Volumes have been provisioned in advance
  ## Ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#selector
  ##
  # selector:
  #  matchLabels:
  #    release: "stable"
  #  matchExpressions:
  #    - { key: environment, operator: In, values: [ dev ] }

  ## Persistent Volume Name
  ## Useful if Persistent Volumes have been provisioned in advance and you want to use a specific one
  ##
  # volumeName: ""

# https://github.com/bitnami/charts/tree/postgresql/16.7.27/bitnami/postgresql#parameters
postgresql:
  # If true, the PostgreSQL dependency is enabled
  enabled: true
  image:
    repository: bitnamilegacy/postgresql
  auth:
    username: cactus-backend
    password: cactus-backend
    database: cactus-backend
  primary:
    networkPolicy:
      enabled: false
    resources:
      limits:
        cpu: 1
        memory: 256Mi
        ephemeral-storage: 2Gi
      requests:
        cpu: 100m
        memory: 128Mi
        ephemeral-storage: 50Mi
  fullnameOverride: cactus-backend-postgresql

# https://github.com/bitnami/charts/tree/redis/22.0.7/bitnami/redis#parameters
redis:
  # If true, the Redis dependency is enabled
  enabled: true
  image:
    repository: bitnamilegacy/redis
  metrics:
    enabled: true
    image:
      repository: bitnamilegacy/redis-exporter
    resources:
      limits:
        cpu: 200m
        memory: 32Mi
      requests:
        cpu: 100m
        memory: 32Mi
    serviceMonitor:
      enabled: false
      namespace: monitoring
  master:
    resources:
      limits:
        cpu: 1
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    disableCommands:
      - FLUSHALL
  replica:
    replicaCount: 1
    resources:
      limits:
        cpu: 1
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    disableCommands:
      - FLUSHALL
  auth:
    enabled: false
  fullnameOverride: redis

postgresqlha:
  enabled: false

# See https://github.com/juicedata/charts/blob/helm-chart-juicefs-s3-gateway-0.11.3/charts/juicefs-s3-gateway/values.yaml
juicefs-s3-gateway:
  enabled: false

emptyDir:
  sizeLimit: 8Gi

envVars:
  ENV: dev
  POSTGRES_NAME: cactus-backend
  POSTGRES_USER: cactus-backend
  FAKESTORE_URL: https://fakestore-backend.prod.lookingglassprotocol.com
  POSTGRES_PORT: 5432
  POSTGRES_SSL_MODE: disable
  POSTGRES_HOST: cactus-backend-postgresql
  REDIS_MASTER_ADDR: redis-master:6379
  REDIS_REPLICA_ADDR: redis-replica:6379
  AUKI_API_URL: https://api.auki.network
  AUKI_DDS_URL: https://dds.auki.network
  AUTH_SERVER_URL: https://auth.auki.network
  RUST_LOG: info
  MIGRATIONS_PATH: /app/migrations
  STORAGE_BASE_PATH: /app/data/blobstorage
  CRONJOBS_TAKE_SNAPSHOT_SCHEDULE: "0 0 16 * * *"
  REDIS_MASTER_POOL_SIZE: 50
  REDIS_MASTER_POOL_CONNECTION_TIMEOUT: 5
  REDIS_MASTER_POOL_IDLE_TIMEOUT: 3
  REDIS_REPLICA_POOL_SIZE: 50
  REDIS_REPLICA_POOL_CONNECTION_TIMEOUT: 5
  REDIS_REPLICA_POOL_IDLE_TIMEOUT: 3
  BLOB_STORAGE_TYPE: local
  S3_ENDPOINT_URL: http://juicefs-s3-gateway:9000
  S3_REGION: eu-central-1
  S3_BUCKET_NAME: cactus-backend-storage
  S3_PATH_PREFIX: 0
  TOKEN_CACHE_TTL: 600
  APP_KEY: cactus-backend
